@page "/fibonacci-grid"
@using FibonacciGrid.Client.Models
@inject Services.IGridCellUpdaterService GridCellUpdaterService

<h1>Fibonacci Grid</h1>

@if (_fibonacciGrid.FibonacciGrid == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="fibonacci-table">
        <tbody>
            @for (var i = 0; i < _fibonacciGrid.FibonacciGrid.GetLength(0); i++)
            {
                var row = i;

                <tr>
                    @for (var j = 0; j < _fibonacciGrid.FibonacciGrid.GetLength(1); j++)
                    {
                        var column = j;

                        <td class="fibonacci-td" data-value="@_fibonacciGrid.FibonacciGrid[i, j].Value">
                            <a onclick="@(() => PlusOne(row, column))">
                                <span class="cell-fill"></span>
                            </a>
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
}


@functions {

    Grid _fibonacciGrid;

    protected override void OnInit()
    {
        _fibonacciGrid = new Grid(50);
    }

    void PlusOne(int row, int column)
    {
        foreach (var cell in _fibonacciGrid.FibonacciGrid)
        {
            var newValue = (cell.Value + 1) * 2;
            GridCellUpdaterService.UpdateCell(cell, newValue);
        }
    }
}
