@page "/"
@using System.Threading
@using FibonacciGrid.Client.Models
@inject Services.IGridCellUpdaterService GridCellUpdaterService
@inject Services.IFibonacciCheckerService FibonacciCheckerService
@inject Services.IFibonacciNeighborService FibonacciNeighborService
@inject Services.IFibonacciSequenceService FibonacciSequenceService

<h1>Fibonacci Grid</h1>

@if (_fibonacciGrid.FibonacciGrid == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="fibonacci-table">
        <tbody>
            @for (var i = 0; i < _fibonacciGrid.FibonacciGrid.GetLength(0); i++)
            {
                var row = i;

                <tr>
                    @for (var j = 0; j < _fibonacciGrid.FibonacciGrid.GetLength(1); j++)
                    {
                        var column = j;
                        var gridCel = _fibonacciGrid.FibonacciGrid[i, j];
                        var highlightAnimation = gridCel.IsSequentialFibonacci ? "animateGreen 3s" : "";

                        <td class="fibonacci-td" data-value="@gridCel.Value"
                            style="animation: @highlightAnimation;
                                      -webkit-animation: @highlightAnimation;">

                            <a onclick="@(() => PlusOne(row, column))">
                                <span class="cell-fill"></span>
                            </a>

                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
}


@functions {

    Grid _fibonacciGrid;

    protected override void OnInit()
    {
        _fibonacciGrid = new Grid(FibonacciCheckerService, 50);
    }

    void PlusOne(int row, int column)
    {
        const int increment = 1;
        var fibonacciCells = GridCellUpdaterService.UpdateCell(_fibonacciGrid, increment, row, column);
        var fibonacciNeighbors = FibonacciNeighborService.FindNeighbors(_fibonacciGrid, fibonacciCells);
        var sequenceCells = FibonacciSequenceService.FindFibonacciSequences(fibonacciNeighbors);

        sequenceCells.ForEach(gridCell =>
                gridCell.SetAsSequentialFibonacci());

        Task.Run(() =>
        {
            if (!sequenceCells.Any()) return;

            Thread.Sleep(1000);

            sequenceCells.ForEach(gridCell =>
                gridCell.ResetValue());

            this.StateHasChanged();
        });
    }
}
